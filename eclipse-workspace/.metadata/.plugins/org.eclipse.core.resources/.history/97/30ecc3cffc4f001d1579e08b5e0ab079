package migrafo;

import java.util.ArrayList;

public class Dijkstra {
	private GrafoPonderadoDirigido grafo;
	private Nodo inicial;
	private int[] d;
	private ArrayList<Integer> s;
	private ArrayList<Nodo> vs;
	private static final int infinito = Integer.MAX_VALUE;
	private boolean[] verificado;

	public Dijkstra(GrafoPonderadoDirigido g, Nodo inicio) {
		this.grafo = g;
		this.inicial = inicio;
		this.s = new ArrayList<Integer>();
		s.add(this.inicial.getNumero());
		this.vs = new ArrayList<Nodo>();
		this.d = new int[this.grafo.getCantNodos()];
		this.s.add(this.inicial.getNumero());
		this.vs.addAll(this.grafo.getNodos());
		this.vs.remove(this.inicial.getNumero() - 1);
		this.setearVectorD();
		this.verificado = new boolean[this.grafo.getCantNodos()];

	}

	public Nodo menorD() {
		int menor = this.d[0];
		int pos = 0;

		for (int i = 1; i < this.d.length; i++) {

			if (this.verificado[i] == false) {
				if (menor > this.d[i]) {
					menor = this.d[i];
					pos = i;
				}
			}

		}
		return new Nodo(pos + 1);
	}

	public void resolver() {

		Nodo menor = this.menorD();

		while (this.s.size() <= this.grafo.getCantNodos()) {
			if (!this.s.contains(menor.getNumero())) {
				for (AristaPonderada ap : this.grafo.getAristas()) {
					if (ap.getNodo1().getNumero() == menor.getNumero()) {

						if (this.d[ap.getNodo2().getNumero() - 1] > this.d[menor.getNumero() - 1] + ap.getPeso()) {
							this.d[ap.getNodo2().getNumero() - 1] = this.d[menor.getNumero() - 1] + ap.getPeso();
							this.verificado[menor.getNumero() - 1] = true;
							this.s.add(menor.getNumero());

						}

					}
				}
				menor = this.menorD();

			}

		}

	}



	public int[] getD() {
		return d;
	}

	public ArrayList<Integer> getS() {
		return s;
	}

	public boolean[] getVerificado() {
		return verificado;
	}

	public Nodo getInicial() {
		return inicial;
	}

	public void setearVectorD() {
		for (Nodo n : this.grafo.getNodos()) {
			if (n.getNumero() != this.inicial.getNumero()) {
				if (this.grafo.getGrafo().hayArista(this.inicial.getNumero(), n.getNumero()) == true) {
					this.d[n.getNumero() - 1] = this.grafo.devolverPeso(this.inicial, n);
				} else
					this.d[n.getNumero() - 1] = this.infinito;

			}
			this.d[this.inicial.getNumero() - 1] = this.infinito;

		}
	}

	public void mostrarVectorD() {
		for (int i = 1; i <= this.d.length; i++)
			System.out.print(this.d[i - 1] + " ");
	}

	public static void main(String[] args) {
		GrafoPonderadoDirigido gp = new GrafoPonderadoDirigido("Archivo/Entrada/grafo.in");
	

		Nodo n1 = new Nodo(4);
		Dijkstra d = new Dijkstra(gp, n1);
		System.out.println("---Mostrando vector---");
		d.mostrarVectorD();
		System.out.println();
		d.resolver();
		System.out.println("---VECTOR D modificado---");
		d.mostrarVectorD();

	}

}
