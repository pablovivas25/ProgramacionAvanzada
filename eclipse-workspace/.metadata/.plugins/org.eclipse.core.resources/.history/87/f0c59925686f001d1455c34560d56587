import java.io.File;
import java.io.FileNotFoundException;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Scanner;

public class Archivo {
	/*
	public Continente leerArchivo(String path) throws FileNotFoundException {
		Scanner sc = new Scanner(new File(path));
		int cantPar = sc.nextInt();
		List<Limitrofe> par = new ArrayList<Limitrofe>();

		for (int i = 0; i < cantPar; i++) {
			par.add(new Limitrofe(new Pais(sc.next()), new Pais(sc.next())));
		}
		sc.close();
		return new Continente(cantPar, par);
	}
	*/
	
	public Continente leerArchivo(String path) throws FileNotFoundException {
		Scanner sc = new Scanner(new File(path));
		int cantPar = sc.nextInt();
		Map<String,Set<String>> limita = new ArrayList<Limitrofe>();

		for (int i = 0; i < cantPar; i++) {
			par.add(new Limitrofe(new Pais(sc.next()), new Pais(sc.next())));
		}
		sc.close();
		return new Continente(cantPar, par);
	}
	
	public void escribirArchivo(String path) throws FileNotFoundException {
		PrintWriter pw=new PrintWriter(new File(path));
		
		pw.close();
	}

	public static void main(String[] args) throws FileNotFoundException {
		Archivo a = new Archivo();
		Continente c = a.leerArchivo("Archivos/Entrada/enunc.in");
		System.out.println("Cant Par " + c.getCantPares());
		System.out.println("PAIS1---LIMITA CON-PAIS2");
		for (Limitrofe l : c.getPares())
			System.out.println(l.getP1().getNombre() + " " + l.getP2().getNombre());
		System.out.println("CANT PAISES CON QUE LIMITA");
		Map<String,Integer> map = c.cuantosPaisesLimita();
		
		for(String p: map.keySet()) {
			System.out.println(p + " "+ map.get(p));
		}
		System.out.println("limitacon");
		Pais p1=new Pais("Argentina");
		List<Pais> limitaCon=c.paisesConQueLimita(p1);
		
		for(Pais p:limitaCon)
		System.out.println(p.getNombre());
		System.out.println("fin de limitacon");
		System.out.println();
		System.out.println("Translimitrofe");
		List<Limitrofe> trans=c.paisTranslimitrofe();
		
		for(Limitrofe l1:trans)
			System.out.println(l1.getP1().getNombre()+" "+l1.getP2().getNombre());

	}
}
